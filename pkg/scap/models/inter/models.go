// Code generated by https://github.com/gocomply/xsd2go; DO NOT EDIT.
// Models for http://scap.nist.gov/schema/ocil/2.0
package inter

import (
	"encoding/xml"
)

// Element
type Ocil struct {
	XMLName xml.Name `xml:"ocil"`

	Generator GeneratorType `xml:"generator"`

	Document *DocumentType `xml:"document"`

	Questionnaires QuestionnairesType `xml:"questionnaires"`

	TestActions TestActionsType `xml:"test_actions"`

	Questions QuestionsType `xml:"questions"`

	Artifacts *ArtifactsType `xml:"artifacts"`

	Variables *VariablesType `xml:"variables"`

	Results *ResultsType `xml:"results"`
}

// Element
type TestAction struct {
	XMLName xml.Name `xml:"test_action"`

	Revision int `xml:"revision,attr"`

	Notes []string `xml:",any"`
}

// Element
type QuestionTestAction struct {
	XMLName xml.Name `xml:"question_test_action"`

	QuestionRef string `xml:"question_ref,attr"`

	Id string `xml:"id,attr"`

	Revision int `xml:"revision,attr"`

	Title *TextType `xml:"title"`

	WhenUnknown *TestActionConditionType `xml:"when_unknown"`

	WhenNotTested *TestActionConditionType `xml:"when_not_tested"`

	WhenNotApplicable *TestActionConditionType `xml:"when_not_applicable"`

	WhenError *TestActionConditionType `xml:"when_error"`

	Notes []string `xml:"notes"`
}

// Element
type BooleanQuestionTestAction struct {
	XMLName xml.Name `xml:"boolean_question_test_action"`

	QuestionRef string `xml:"question_ref,attr"`

	Id string `xml:"id,attr"`

	Revision int `xml:"revision,attr"`

	WhenTrue TestActionConditionType `xml:"when_true"`

	WhenFalse TestActionConditionType `xml:"when_false"`

	Title *TextType `xml:"title"`

	WhenUnknown *TestActionConditionType `xml:"when_unknown"`

	WhenNotTested *TestActionConditionType `xml:"when_not_tested"`

	WhenNotApplicable *TestActionConditionType `xml:"when_not_applicable"`

	WhenError *TestActionConditionType `xml:"when_error"`

	Notes []string `xml:"notes"`
}

// Element
type ChoiceQuestionTestAction struct {
	XMLName xml.Name `xml:"choice_question_test_action"`

	QuestionRef string `xml:"question_ref,attr"`

	Id string `xml:"id,attr"`

	Revision int `xml:"revision,attr"`

	WhenChoice []ChoiceTestActionConditionType `xml:"when_choice"`

	Title *TextType `xml:"title"`

	WhenUnknown *TestActionConditionType `xml:"when_unknown"`

	WhenNotTested *TestActionConditionType `xml:"when_not_tested"`

	WhenNotApplicable *TestActionConditionType `xml:"when_not_applicable"`

	WhenError *TestActionConditionType `xml:"when_error"`

	Notes []string `xml:"notes"`
}

// Element
type NumericQuestionTestAction struct {
	XMLName xml.Name `xml:"numeric_question_test_action"`

	QuestionRef string `xml:"question_ref,attr"`

	Id string `xml:"id,attr"`

	Revision int `xml:"revision,attr"`

	Title *TextType `xml:"title"`

	WhenUnknown *TestActionConditionType `xml:"when_unknown"`

	WhenNotTested *TestActionConditionType `xml:"when_not_tested"`

	WhenNotApplicable *TestActionConditionType `xml:"when_not_applicable"`

	WhenError *TestActionConditionType `xml:"when_error"`

	Notes []string `xml:"notes"`
}

// Element
type StringQuestionTestAction struct {
	XMLName xml.Name `xml:"string_question_test_action"`

	QuestionRef string `xml:"question_ref,attr"`

	Id string `xml:"id,attr"`

	Revision int `xml:"revision,attr"`

	WhenPattern []PatternTestActionConditionType `xml:"when_pattern"`

	Title *TextType `xml:"title"`

	WhenUnknown *TestActionConditionType `xml:"when_unknown"`

	WhenNotTested *TestActionConditionType `xml:"when_not_tested"`

	WhenNotApplicable *TestActionConditionType `xml:"when_not_applicable"`

	WhenError *TestActionConditionType `xml:"when_error"`

	Notes []string `xml:"notes"`
}

// Element
type Question struct {
	XMLName xml.Name `xml:"question"`

	Id string `xml:"id,attr"`

	Revision int `xml:"revision,attr"`

	QuestionText []QuestionTextType `xml:"question_text"`

	Instructions *InstructionsType `xml:"instructions"`

	Notes []string `xml:"notes"`
}

// Element
type BooleanQuestion struct {
	XMLName xml.Name `xml:"boolean_question"`

	DefaultAnswer string `xml:"default_answer,attr,omitempty"`

	Model string `xml:"model,attr,omitempty"`

	Id string `xml:"id,attr"`

	Revision int `xml:"revision,attr"`

	QuestionText []QuestionTextType `xml:"question_text"`

	Instructions *InstructionsType `xml:"instructions"`

	Notes []string `xml:"notes"`
}

// Element
type ChoiceQuestion struct {
	XMLName xml.Name `xml:"choice_question"`

	DefaultAnswerRef string `xml:"default_answer_ref,attr,omitempty"`

	Id string `xml:"id,attr"`

	Revision int `xml:"revision,attr"`

	QuestionText []QuestionTextType `xml:"question_text"`

	Instructions *InstructionsType `xml:"instructions"`

	Notes []string `xml:"notes"`
}

// Element
type NumericQuestion struct {
	XMLName xml.Name `xml:"numeric_question"`

	DefaultAnswer string `xml:"default_answer,attr,omitempty"`

	Id string `xml:"id,attr"`

	Revision int `xml:"revision,attr"`

	QuestionText []QuestionTextType `xml:"question_text"`

	Instructions *InstructionsType `xml:"instructions"`

	Notes []string `xml:"notes"`
}

// Element
type StringQuestion struct {
	XMLName xml.Name `xml:"string_question"`

	DefaultAnswer string `xml:"default_answer,attr,omitempty"`

	Id string `xml:"id,attr"`

	Revision int `xml:"revision,attr"`

	QuestionText []QuestionTextType `xml:"question_text"`

	Instructions *InstructionsType `xml:"instructions"`

	Notes []string `xml:"notes"`
}

// Element
type Variable struct {
	XMLName xml.Name `xml:"variable"`

	Id string `xml:"id,attr"`

	Datatype string `xml:"datatype,attr"`

	Revision int `xml:"revision,attr"`

	Description *TextType `xml:"description"`

	Notes []string `xml:"notes"`
}

// Element
type ConstantVariable struct {
	XMLName xml.Name `xml:"constant_variable"`

	Id string `xml:"id,attr"`

	Datatype string `xml:"datatype,attr"`

	Revision int `xml:"revision,attr"`

	Value string `xml:"value"`

	Description *TextType `xml:"description"`

	Notes []string `xml:"notes"`
}

// Element
type LocalVariable struct {
	XMLName xml.Name `xml:"local_variable"`

	QuestionRef string `xml:"question_ref,attr"`

	Id string `xml:"id,attr"`

	Datatype string `xml:"datatype,attr"`

	Revision int `xml:"revision,attr"`

	Set string `xml:"set"`

	Description *TextType `xml:"description"`

	Notes []string `xml:"notes"`
}

// Element
type ExternalVariable struct {
	XMLName xml.Name `xml:"external_variable"`

	Id string `xml:"id,attr"`

	Datatype string `xml:"datatype,attr"`

	Revision int `xml:"revision,attr"`

	Description *TextType `xml:"description"`

	Notes []string `xml:"notes"`
}

// Element
type Target struct {
	XMLName xml.Name `xml:"target"`

	Revision int `xml:"revision,attr"`

	Name string `xml:"name"`

	Notes []string `xml:"notes"`
}

// Element
type User struct {
	XMLName xml.Name `xml:"user"`

	Revision int `xml:"revision,attr"`

	Organization []string `xml:"organization"`

	Position []string `xml:"position"`

	Email []string `xml:"email"`

	Name string `xml:"name"`

	Notes []string `xml:"notes"`
}

// Element
type System struct {
	XMLName xml.Name `xml:"system"`

	Revision int `xml:"revision,attr"`

	Organization string `xml:"organization"`

	Ipaddress []string `xml:"ipaddress"`

	Description *TextType `xml:"description"`

	Name string `xml:"name"`

	Notes []string `xml:"notes"`
}

// Element
type QuestionResult struct {
	XMLName xml.Name `xml:"question_result"`

	QuestionRef QuestionIDPattern `xml:"question_ref,attr"`

	Response UserResponseType `xml:"response,attr,omitempty"`
}

// Element
type BooleanQuestionResult struct {
	XMLName xml.Name `xml:"boolean_question_result"`

	QuestionRef QuestionIDPattern `xml:"question_ref,attr"`

	Response UserResponseType `xml:"response,attr,omitempty"`

	Answer bool `xml:",any"`
}

// Element
type ChoiceQuestionResult struct {
	XMLName xml.Name `xml:"choice_question_result"`

	QuestionRef QuestionIDPattern `xml:"question_ref,attr"`

	Response UserResponseType `xml:"response,attr,omitempty"`

	Answer ChoiceAnswerType `xml:",any"`
}

// Element
type NumericQuestionResult struct {
	XMLName xml.Name `xml:"numeric_question_result"`

	QuestionRef QuestionIDPattern `xml:"question_ref,attr"`

	Response UserResponseType `xml:"response,attr,omitempty"`

	Answer float64 `xml:",any"`
}

// Element
type StringQuestionResult struct {
	XMLName xml.Name `xml:"string_question_result"`

	QuestionRef QuestionIDPattern `xml:"question_ref,attr"`

	Response UserResponseType `xml:"response,attr,omitempty"`

	Answer string `xml:",any"`
}

// Element
type ArtifactValue struct {
	XMLName xml.Name `xml:"artifact_value"`
}

// Element
type TextArtifactValue struct {
	XMLName xml.Name `xml:"text_artifact_value"`

	MimeType string `xml:"mime_type,attr"`

	Data string `xml:",any"`
}

// Element
type BinaryArtifactValue struct {
	XMLName xml.Name `xml:"binary_artifact_value"`

	MimeType string `xml:"mime_type,attr"`

	Data string `xml:",any"`
}

// Element
type ReferenceArtifactValue struct {
	XMLName xml.Name `xml:"reference_artifact_value"`

	Reference Reference `xml:",any"`
}

// Element
type Expression struct {
	XMLName xml.Name `xml:"expression"`

	Value string `xml:",any"`
}

// Element
type WhenPattern struct {
	XMLName xml.Name `xml:"when_pattern"`

	Pattern string `xml:"pattern,attr"`

	Value string `xml:",any"`
}

// Element
type WhenChoice struct {
	XMLName xml.Name `xml:"when_choice"`

	ChoiceRef ChoiceIDPattern `xml:"choice_ref,attr"`

	Value string `xml:",any"`
}

// Element
type WhenRange struct {
	XMLName xml.Name `xml:"when_range"`

	Min float64 `xml:"min,attr"`

	Max float64 `xml:"max,attr"`

	Value string `xml:",any"`
}

// Element
type WhenBoolean struct {
	XMLName xml.Name `xml:"when_boolean"`

	Value bool `xml:"value,attr"`

	ValueElm string `xml:",any"`
}

// Element
type Reference struct {
	XMLName xml.Name `xml:"reference"`

	Href string `xml:"href,attr"`
}

// XSD ComplexType declarations

type OCILType struct {
	XMLName xml.Name

	Generator GeneratorType `xml:"generator"`

	Document *DocumentType `xml:"document"`

	Questionnaires QuestionnairesType `xml:"questionnaires"`

	TestActions TestActionsType `xml:"test_actions"`

	Questions QuestionsType `xml:"questions"`

	Artifacts *ArtifactsType `xml:"artifacts"`

	Variables *VariablesType `xml:"variables"`

	Results *ResultsType `xml:"results"`

	InnerXml string `xml:",innerxml"`
}

type QuestionnairesType struct {
	XMLName xml.Name

	Questionnaire []QuestionnaireType `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type QuestionnaireType struct {
	XMLName xml.Name

	Id string `xml:"id,attr"`

	ChildOnly string `xml:"child_only,attr,omitempty"`

	Revision int `xml:"revision,attr"`

	Title *TextType `xml:"title"`

	Description *TextType `xml:"description"`

	References *ReferencesType `xml:"references"`

	Actions OperationType `xml:"actions"`

	Notes []string `xml:"notes"`

	InnerXml string `xml:",innerxml"`
}

type GeneratorType struct {
	XMLName xml.Name

	ProductName string `xml:"product_name"`

	ProductVersion string `xml:"product_version"`

	Author []UserType `xml:"author"`

	SchemaVersion float64 `xml:"schema_version"`

	Timestamp string `xml:"timestamp"`

	AdditionalData *ExtensionContainerType `xml:"additional_data"`

	InnerXml string `xml:",innerxml"`
}

type ExtensionContainerType struct {
	XMLName xml.Name

	InnerXml string `xml:",innerxml"`
}

type DocumentType struct {
	XMLName xml.Name

	Title string `xml:"title"`

	Description []string `xml:"description"`

	Notice []string `xml:"notice"`

	InnerXml string `xml:",innerxml"`
}

type TestActionsType struct {
	XMLName xml.Name

	TestAction []ItemBaseType `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type QuestionTestActionType struct {
	XMLName xml.Name

	QuestionRef string `xml:"question_ref,attr"`

	Id string `xml:"id,attr"`

	Revision int `xml:"revision,attr"`

	Title *TextType `xml:"title"`

	WhenUnknown *TestActionConditionType `xml:"when_unknown"`

	WhenNotTested *TestActionConditionType `xml:"when_not_tested"`

	WhenNotApplicable *TestActionConditionType `xml:"when_not_applicable"`

	WhenError *TestActionConditionType `xml:"when_error"`

	Notes []string `xml:"notes"`

	InnerXml string `xml:",innerxml"`
}

type BooleanQuestionTestActionType struct {
	XMLName xml.Name

	QuestionRef string `xml:"question_ref,attr"`

	Id string `xml:"id,attr"`

	Revision int `xml:"revision,attr"`

	WhenTrue TestActionConditionType `xml:"when_true"`

	WhenFalse TestActionConditionType `xml:"when_false"`

	Title *TextType `xml:"title"`

	WhenUnknown *TestActionConditionType `xml:"when_unknown"`

	WhenNotTested *TestActionConditionType `xml:"when_not_tested"`

	WhenNotApplicable *TestActionConditionType `xml:"when_not_applicable"`

	WhenError *TestActionConditionType `xml:"when_error"`

	Notes []string `xml:"notes"`

	InnerXml string `xml:",innerxml"`
}

type ChoiceQuestionTestActionType struct {
	XMLName xml.Name

	QuestionRef string `xml:"question_ref,attr"`

	Id string `xml:"id,attr"`

	Revision int `xml:"revision,attr"`

	WhenChoice []ChoiceTestActionConditionType `xml:"when_choice"`

	Title *TextType `xml:"title"`

	WhenUnknown *TestActionConditionType `xml:"when_unknown"`

	WhenNotTested *TestActionConditionType `xml:"when_not_tested"`

	WhenNotApplicable *TestActionConditionType `xml:"when_not_applicable"`

	WhenError *TestActionConditionType `xml:"when_error"`

	Notes []string `xml:"notes"`

	InnerXml string `xml:",innerxml"`
}

type NumericQuestionTestActionType struct {
	XMLName xml.Name

	QuestionRef string `xml:"question_ref,attr"`

	Id string `xml:"id,attr"`

	Revision int `xml:"revision,attr"`

	Title *TextType `xml:"title"`

	WhenUnknown *TestActionConditionType `xml:"when_unknown"`

	WhenNotTested *TestActionConditionType `xml:"when_not_tested"`

	WhenNotApplicable *TestActionConditionType `xml:"when_not_applicable"`

	WhenError *TestActionConditionType `xml:"when_error"`

	Notes []string `xml:"notes"`

	InnerXml string `xml:",innerxml"`
}

type StringQuestionTestActionType struct {
	XMLName xml.Name

	QuestionRef string `xml:"question_ref,attr"`

	Id string `xml:"id,attr"`

	Revision int `xml:"revision,attr"`

	WhenPattern []PatternTestActionConditionType `xml:"when_pattern"`

	Title *TextType `xml:"title"`

	WhenUnknown *TestActionConditionType `xml:"when_unknown"`

	WhenNotTested *TestActionConditionType `xml:"when_not_tested"`

	WhenNotApplicable *TestActionConditionType `xml:"when_not_applicable"`

	WhenError *TestActionConditionType `xml:"when_error"`

	Notes []string `xml:"notes"`

	InnerXml string `xml:",innerxml"`
}

type TestActionRefType struct {
	XMLName xml.Name

	Negate bool `xml:"negate,attr"`

	Text     string `xml:",chardata"`
	InnerXml string `xml:",innerxml"`
}

type ChoiceTestActionConditionType struct {
	XMLName xml.Name

	ChoiceRef []ChoiceIDPattern `xml:"choice_ref"`

	ArtifactRefs *ArtifactRefsType `xml:"artifact_refs"`

	Result *ResultType `xml:"result"`

	TestActionRef *TestActionRefType `xml:"test_action_ref"`

	InnerXml string `xml:",innerxml"`
}

type EqualsTestActionConditionType struct {
	XMLName xml.Name

	VarRef VariableIDPattern `xml:"var_ref,attr,omitempty"`

	Value []float64 `xml:"value"`

	ArtifactRefs *ArtifactRefsType `xml:"artifact_refs"`

	Result *ResultType `xml:"result"`

	TestActionRef *TestActionRefType `xml:"test_action_ref"`

	InnerXml string `xml:",innerxml"`
}

type RangeTestActionConditionType struct {
	XMLName xml.Name

	Range []RangeType `xml:"range"`

	ArtifactRefs *ArtifactRefsType `xml:"artifact_refs"`

	Result *ResultType `xml:"result"`

	TestActionRef *TestActionRefType `xml:"test_action_ref"`

	InnerXml string `xml:",innerxml"`
}

type PatternTestActionConditionType struct {
	XMLName xml.Name

	Pattern []PatternType `xml:"pattern"`

	ArtifactRefs *ArtifactRefsType `xml:"artifact_refs"`

	Result *ResultType `xml:"result"`

	TestActionRef *TestActionRefType `xml:"test_action_ref"`

	InnerXml string `xml:",innerxml"`
}

type PatternType struct {
	XMLName xml.Name

	VarRef VariableIDPattern `xml:"var_ref,attr,omitempty"`

	Text     string `xml:",chardata"`
	InnerXml string `xml:",innerxml"`
}

type RangeType struct {
	XMLName xml.Name

	Min *RangeValueType `xml:"min"`

	Max *RangeValueType `xml:"max"`

	InnerXml string `xml:",innerxml"`
}

type TestActionConditionType struct {
	XMLName xml.Name

	ArtifactRefs *ArtifactRefsType `xml:"artifact_refs"`

	Result *ResultType `xml:"result"`

	TestActionRef *TestActionRefType `xml:"test_action_ref"`

	InnerXml string `xml:",innerxml"`
}

type RangeValueType struct {
	XMLName xml.Name

	Inclusive bool `xml:"inclusive,attr"`

	VarRef VariableIDPattern `xml:"var_ref,attr,omitempty"`

	Text     string `xml:",chardata"`
	InnerXml string `xml:",innerxml"`
}

type QuestionsType struct {
	XMLName xml.Name

	Question []QuestionType `xml:"question"`

	ChoiceGroup []ChoiceGroupType `xml:"choice_group"`

	InnerXml string `xml:",innerxml"`
}

type QuestionTextType struct {
	XMLName xml.Name

	Sub []SubstitutionTextType `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type QuestionType struct {
	XMLName xml.Name

	Id string `xml:"id,attr"`

	Revision int `xml:"revision,attr"`

	QuestionText []QuestionTextType `xml:"question_text"`

	Instructions *InstructionsType `xml:"instructions"`

	Notes []string `xml:"notes"`

	InnerXml string `xml:",innerxml"`
}

type BooleanQuestionType struct {
	XMLName xml.Name

	DefaultAnswer string `xml:"default_answer,attr,omitempty"`

	Model string `xml:"model,attr,omitempty"`

	Id string `xml:"id,attr"`

	Revision int `xml:"revision,attr"`

	QuestionText []QuestionTextType `xml:"question_text"`

	Instructions *InstructionsType `xml:"instructions"`

	Notes []string `xml:"notes"`

	InnerXml string `xml:",innerxml"`
}

type ChoiceQuestionType struct {
	XMLName xml.Name

	DefaultAnswerRef string `xml:"default_answer_ref,attr,omitempty"`

	Id string `xml:"id,attr"`

	Revision int `xml:"revision,attr"`

	QuestionText []QuestionTextType `xml:"question_text"`

	Instructions *InstructionsType `xml:"instructions"`

	Notes []string `xml:"notes"`

	InnerXml string `xml:",innerxml"`
}

type NumericQuestionType struct {
	XMLName xml.Name

	DefaultAnswer string `xml:"default_answer,attr,omitempty"`

	Id string `xml:"id,attr"`

	Revision int `xml:"revision,attr"`

	QuestionText []QuestionTextType `xml:"question_text"`

	Instructions *InstructionsType `xml:"instructions"`

	Notes []string `xml:"notes"`

	InnerXml string `xml:",innerxml"`
}

type StringQuestionType struct {
	XMLName xml.Name

	DefaultAnswer string `xml:"default_answer,attr,omitempty"`

	Id string `xml:"id,attr"`

	Revision int `xml:"revision,attr"`

	QuestionText []QuestionTextType `xml:"question_text"`

	Instructions *InstructionsType `xml:"instructions"`

	Notes []string `xml:"notes"`

	InnerXml string `xml:",innerxml"`
}

type ChoiceType struct {
	XMLName xml.Name

	Id ChoiceIDPattern `xml:"id,attr"`

	VarRef VariableIDPattern `xml:"var_ref,attr,omitempty"`

	Text     string `xml:",chardata"`
	InnerXml string `xml:",innerxml"`
}

type ChoiceGroupType struct {
	XMLName xml.Name

	Id ChoiceGroupIDPattern `xml:"id,attr"`

	Choice []ChoiceType `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type InstructionsType struct {
	XMLName xml.Name

	Title TextType `xml:"title"`

	Step []StepType `xml:"step"`

	InnerXml string `xml:",innerxml"`
}

type ResultsType struct {
	XMLName xml.Name

	StartTime string `xml:"start_time,attr,omitempty"`

	EndTime string `xml:"end_time,attr,omitempty"`

	Title *TextType `xml:"title"`

	QuestionnaireResults *QuestionnaireResultsType `xml:"questionnaire_results"`

	TestActionResults *TestActionResultsType `xml:"test_action_results"`

	QuestionResults *QuestionResultsType `xml:"question_results"`

	ArtifactResults *ArtifactResultsType `xml:"artifact_results"`

	Targets *TargetsType `xml:"targets"`

	InnerXml string `xml:",innerxml"`
}

type QuestionnaireResultsType struct {
	XMLName xml.Name

	QuestionnaireResult []QuestionnaireResultType `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type TestActionResultsType struct {
	XMLName xml.Name

	TestActionResult []TestActionResultType `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type QuestionResultsType struct {
	XMLName xml.Name

	QuestionResult []QuestionResultType `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type QuestionnaireResultType struct {
	XMLName xml.Name

	QuestionnaireRef QuestionnaireIDPattern `xml:"questionnaire_ref,attr"`

	Result ResultType `xml:"result,attr"`

	ArtifactResults *ArtifactResultsType `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type TestActionResultType struct {
	XMLName xml.Name

	TestActionRef TestActionRefValuePattern `xml:"test_action_ref,attr"`

	Result ResultType `xml:"result,attr"`

	ArtifactResults *ArtifactResultsType `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type QuestionResultType struct {
	XMLName xml.Name

	QuestionRef QuestionIDPattern `xml:"question_ref,attr"`

	Response UserResponseType `xml:"response,attr,omitempty"`

	InnerXml string `xml:",innerxml"`
}

type BooleanQuestionResultType struct {
	XMLName xml.Name

	QuestionRef QuestionIDPattern `xml:"question_ref,attr"`

	Response UserResponseType `xml:"response,attr,omitempty"`

	Answer bool `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type ChoiceQuestionResultType struct {
	XMLName xml.Name

	QuestionRef QuestionIDPattern `xml:"question_ref,attr"`

	Response UserResponseType `xml:"response,attr,omitempty"`

	Answer ChoiceAnswerType `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type NumericQuestionResultType struct {
	XMLName xml.Name

	QuestionRef QuestionIDPattern `xml:"question_ref,attr"`

	Response UserResponseType `xml:"response,attr,omitempty"`

	Answer float64 `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type StringQuestionResultType struct {
	XMLName xml.Name

	QuestionRef QuestionIDPattern `xml:"question_ref,attr"`

	Response UserResponseType `xml:"response,attr,omitempty"`

	Answer string `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type ChoiceAnswerType struct {
	XMLName xml.Name

	ChoiceRef ChoiceIDPattern `xml:"choice_ref,attr"`

	InnerXml string `xml:",innerxml"`
}

type ArtifactsType struct {
	XMLName xml.Name

	Artifact []ArtifactType `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type ArtifactType struct {
	XMLName xml.Name

	Id string `xml:"id,attr"`

	Persistent string `xml:"persistent,attr,omitempty"`

	Revision int `xml:"revision,attr"`

	Title TextType `xml:"title"`

	Description TextType `xml:"description"`

	Notes []string `xml:"notes"`

	InnerXml string `xml:",innerxml"`
}

type ArtifactRefsType struct {
	XMLName xml.Name

	ArtifactRef []ArtifactRefType `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type ArtifactRefType struct {
	XMLName xml.Name

	Idref ArtifactIDPattern `xml:"idref,attr"`

	Required bool `xml:"required,attr,omitempty"`

	InnerXml string `xml:",innerxml"`
}

type ArtifactResultsType struct {
	XMLName xml.Name

	ArtifactResult []ArtifactResultType `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type ArtifactValueType struct {
	XMLName xml.Name

	InnerXml string `xml:",innerxml"`
}

type EmbeddedArtifactValueType struct {
	XMLName xml.Name

	MimeType string `xml:"mime_type,attr"`

	InnerXml string `xml:",innerxml"`
}

type TextArtifactValueType struct {
	XMLName xml.Name

	MimeType string `xml:"mime_type,attr"`

	Data string `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type BinaryArtifactValueType struct {
	XMLName xml.Name

	MimeType string `xml:"mime_type,attr"`

	Data string `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type ReferenceArtifactValueType struct {
	XMLName xml.Name

	Reference Reference `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type ArtifactResultType struct {
	XMLName xml.Name

	ArtifactRef ArtifactIDPattern `xml:"artifact_ref,attr"`

	Timestamp string `xml:"timestamp,attr"`

	ArtifactValue ArtifactValueType `xml:"artifact_value"`

	Provider ProviderValuePattern `xml:"provider"`

	Submitter UserType `xml:"submitter"`

	InnerXml string `xml:",innerxml"`
}

type TargetsType struct {
	XMLName xml.Name

	Target []NamedItemBaseType `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type UserType struct {
	XMLName xml.Name

	Revision int `xml:"revision,attr"`

	Organization []string `xml:"organization"`

	Position []string `xml:"position"`

	Email []string `xml:"email"`

	Name string `xml:"name"`

	Notes []string `xml:"notes"`

	InnerXml string `xml:",innerxml"`
}

type SystemTargetType struct {
	XMLName xml.Name

	Revision int `xml:"revision,attr"`

	Organization string `xml:"organization"`

	Ipaddress []string `xml:"ipaddress"`

	Description *TextType `xml:"description"`

	Name string `xml:"name"`

	Notes []string `xml:"notes"`

	InnerXml string `xml:",innerxml"`
}

type VariablesType struct {
	XMLName xml.Name

	Variable []VariableType `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type VariableType struct {
	XMLName xml.Name

	Id string `xml:"id,attr"`

	Datatype string `xml:"datatype,attr"`

	Revision int `xml:"revision,attr"`

	Description *TextType `xml:"description"`

	Notes []string `xml:"notes"`

	InnerXml string `xml:",innerxml"`
}

type ConstantVariableType struct {
	XMLName xml.Name

	Id string `xml:"id,attr"`

	Datatype string `xml:"datatype,attr"`

	Revision int `xml:"revision,attr"`

	Value string `xml:"value"`

	Description *TextType `xml:"description"`

	Notes []string `xml:"notes"`

	InnerXml string `xml:",innerxml"`
}

type LocalVariableType struct {
	XMLName xml.Name

	QuestionRef string `xml:"question_ref,attr"`

	Id string `xml:"id,attr"`

	Datatype string `xml:"datatype,attr"`

	Revision int `xml:"revision,attr"`

	Set string `xml:"set"`

	Description *TextType `xml:"description"`

	Notes []string `xml:"notes"`

	InnerXml string `xml:",innerxml"`
}

type ExternalVariableType struct {
	XMLName xml.Name

	Id string `xml:"id,attr"`

	Datatype string `xml:"datatype,attr"`

	Revision int `xml:"revision,attr"`

	Description *TextType `xml:"description"`

	Notes []string `xml:"notes"`

	InnerXml string `xml:",innerxml"`
}

type SetExpressionBaseType struct {
	XMLName xml.Name

	Value string `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type SetExpressionPatternType struct {
	XMLName xml.Name

	Pattern string `xml:"pattern,attr"`

	Value string `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type SetExpressionChoiceType struct {
	XMLName xml.Name

	ChoiceRef ChoiceIDPattern `xml:"choice_ref,attr"`

	Value string `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type SetExpressionRangeType struct {
	XMLName xml.Name

	Min float64 `xml:"min,attr"`

	Max float64 `xml:"max,attr"`

	Value string `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type SetExpressionBooleanType struct {
	XMLName xml.Name

	Value bool `xml:"value,attr"`

	ValueElm string `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type VariableSetType struct {
	XMLName xml.Name

	Expression []SetExpressionBaseType `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type SubstitutionTextType struct {
	XMLName xml.Name

	VarRef VariableIDPattern `xml:"var_ref,attr"`

	InnerXml string `xml:",innerxml"`
}

type ReferenceType struct {
	XMLName xml.Name

	Href string `xml:"href,attr"`

	XmlLang string `xml:"lang,attr"`

	Text     string `xml:",chardata"`
	InnerXml string `xml:",innerxml"`
}

type StepType struct {
	XMLName xml.Name

	IsDone bool `xml:"is_done,attr,omitempty"`

	IsRequired bool `xml:"is_required,attr,omitempty"`

	Description *TextType `xml:"description"`

	Reference []ReferenceType `xml:"reference"`

	Step []StepType `xml:"step"`

	InnerXml string `xml:",innerxml"`
}

type ItemBaseType struct {
	XMLName xml.Name

	Revision int `xml:"revision,attr"`

	Notes []string `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type NamedItemBaseType struct {
	XMLName xml.Name

	Revision int `xml:"revision,attr"`

	Name string `xml:"name"`

	Notes []string `xml:"notes"`

	InnerXml string `xml:",innerxml"`
}

type CompoundTestActionType struct {
	XMLName xml.Name

	Revision int `xml:"revision,attr"`

	Title *TextType `xml:"title"`

	Description *TextType `xml:"description"`

	References *ReferencesType `xml:"references"`

	Actions OperationType `xml:"actions"`

	Notes []string `xml:"notes"`

	InnerXml string `xml:",innerxml"`
}

type ReferencesType struct {
	XMLName xml.Name

	Reference []ReferenceType `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type OperationType struct {
	XMLName xml.Name

	Operation OperatorType `xml:"operation,attr,omitempty"`

	Negate bool `xml:"negate,attr,omitempty"`

	TestActionRef []TestActionRefType `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type TextType struct {
	XMLName xml.Name

	XmlLang string `xml:"lang,attr"`

	Text     string `xml:",chardata"`
	InnerXml string `xml:",innerxml"`
}

// XSD SimpleType declarations

type BooleanQuestionModelType string

const BooleanQuestionModelTypeModelYesNo BooleanQuestionModelType = "MODEL_YES_NO"

const BooleanQuestionModelTypeModelTrueFalse BooleanQuestionModelType = "MODEL_TRUE_FALSE"

type ResultType string

type ExceptionalResultType string

const ExceptionalResultTypeUnknown ExceptionalResultType = "UNKNOWN"

const ExceptionalResultTypeError ExceptionalResultType = "ERROR"

const ExceptionalResultTypeNotTested ExceptionalResultType = "NOT_TESTED"

const ExceptionalResultTypeNotApplicable ExceptionalResultType = "NOT_APPLICABLE"

type UserResponseType string

type VariableDataType string

const VariableDataTypeText VariableDataType = "TEXT"

const VariableDataTypeNumeric VariableDataType = "NUMERIC"

type OperatorType string

const OperatorTypeAnd OperatorType = "AND"

const OperatorTypeOr OperatorType = "OR"

type TestActionRefValuePattern string

type QuestionnaireIDPattern string

type QuestionTestActionIDPattern string

type QuestionIDPattern string

type ChoiceIDPattern string

type ChoiceGroupIDPattern string

type VariableIDPattern string

type ArtifactIDPattern string

type ProviderValuePattern string
