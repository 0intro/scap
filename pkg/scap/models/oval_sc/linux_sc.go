// Code generated by https://github.com/gocomply/xsd2go; DO NOT EDIT.
// Models for http://oval.mitre.org/XMLSchema/oval-system-characteristics-5#linux
package oval_sc

import (
	"encoding/xml"
	"github.com/0intro/scap/pkg/scap/models/oval"
)

// Element
type ApparmorstatusItem struct {
	XMLName xml.Name `xml:"apparmorstatus_item"`

	Id oval.ItemIDPattern `xml:"id,attr"`

	Status StatusEnumeration `xml:"status,attr,omitempty"`

	LoadedProfilesCount *EntityItemIntType `xml:"loaded_profiles_count"`

	EnforceModeProfilesCount *EntityItemIntType `xml:"enforce_mode_profiles_count"`

	ComplainModeProfilesCount *EntityItemIntType `xml:"complain_mode_profiles_count"`

	ProcessesWithProfilesCount *EntityItemIntType `xml:"processes_with_profiles_count"`

	EnforceModeProcessesCount *EntityItemIntType `xml:"enforce_mode_processes_count"`

	ComplainModeProcessesCount *EntityItemIntType `xml:"complain_mode_processes_count"`

	UnconfinedProcessesWithProfilesCount *EntityItemIntType `xml:"unconfined_processes_with_profiles_count"`

	Message []oval.MessageType `xml:"message"`
}

// Element
type DpkginfoItem struct {
	XMLName xml.Name `xml:"dpkginfo_item"`

	Id oval.ItemIDPattern `xml:"id,attr"`

	Status StatusEnumeration `xml:"status,attr,omitempty"`

	Name *EntityItemStringType `xml:"name"`

	Arch *EntityItemStringType `xml:"arch"`

	Epoch *DpkginfoItemEpoch `xml:"epoch"`

	Release *DpkginfoItemRelease `xml:"release"`

	Version *DpkginfoItemVersion `xml:"version"`

	Evr *DpkginfoItemEvr `xml:"evr"`

	Message []oval.MessageType `xml:"message"`
}

// Element
type IflistenersItem struct {
	XMLName xml.Name `xml:"iflisteners_item"`

	Id oval.ItemIDPattern `xml:"id,attr"`

	Status StatusEnumeration `xml:"status,attr,omitempty"`

	InterfaceName *EntityItemStringType `xml:"interface_name"`

	Protocol *EntityItemProtocolType `xml:"protocol"`

	HwAddress *EntityItemStringType `xml:"hw_address"`

	ProgramName *EntityItemStringType `xml:"program_name"`

	Pid *EntityItemIntType `xml:"pid"`

	UserId *EntityItemIntType `xml:"user_id"`

	Message []oval.MessageType `xml:"message"`
}

// Element
type InetlisteningserverItem struct {
	XMLName xml.Name `xml:"inetlisteningserver_item"`

	Id oval.ItemIDPattern `xml:"id,attr"`

	Status StatusEnumeration `xml:"status,attr,omitempty"`

	Protocol *EntityItemStringType `xml:"protocol"`

	LocalAddress *EntityItemIPAddressStringType `xml:"local_address"`

	LocalPort *EntityItemIntType `xml:"local_port"`

	LocalFullAddress *EntityItemStringType `xml:"local_full_address"`

	ProgramName *EntityItemStringType `xml:"program_name"`

	ForeignAddress *EntityItemIPAddressStringType `xml:"foreign_address"`

	ForeignPort *EntityItemIntType `xml:"foreign_port"`

	ForeignFullAddress *EntityItemStringType `xml:"foreign_full_address"`

	Pid *EntityItemIntType `xml:"pid"`

	UserId *EntityItemIntType `xml:"user_id"`

	Message []oval.MessageType `xml:"message"`
}

// Element
type PartitionItem struct {
	XMLName xml.Name `xml:"partition_item"`

	Id oval.ItemIDPattern `xml:"id,attr"`

	Status StatusEnumeration `xml:"status,attr,omitempty"`

	MountPoint *EntityItemStringType `xml:"mount_point"`

	Device *EntityItemStringType `xml:"device"`

	Uuid *EntityItemStringType `xml:"uuid"`

	FsType *EntityItemStringType `xml:"fs_type"`

	MountOptions []EntityItemStringType `xml:"mount_options"`

	TotalSpace *EntityItemIntType `xml:"total_space"`

	SpaceUsed *EntityItemIntType `xml:"space_used"`

	SpaceLeft *EntityItemIntType `xml:"space_left"`

	SpaceLeftForUnprivilegedUsers *EntityItemIntType `xml:"space_left_for_unprivileged_users"`

	BlockSize *EntityItemIntType `xml:"block_size"`

	Message []oval.MessageType `xml:"message"`
}

// Element
type RpminfoItem struct {
	XMLName xml.Name `xml:"rpminfo_item"`

	Id oval.ItemIDPattern `xml:"id,attr"`

	Status StatusEnumeration `xml:"status,attr,omitempty"`

	Name *EntityItemStringType `xml:"name"`

	Arch *EntityItemStringType `xml:"arch"`

	Epoch *RpminfoItemEpoch `xml:"epoch"`

	Release *RpminfoItemRelease `xml:"release"`

	Version *RpminfoItemVersion `xml:"version"`

	Evr *EntityItemEVRStringType `xml:"evr"`

	SignatureKeyid *EntityItemStringType `xml:"signature_keyid"`

	ExtendedName *EntityItemStringType `xml:"extended_name"`

	Filepath []EntityItemStringType `xml:"filepath"`

	Message []oval.MessageType `xml:"message"`
}

// Element
type RpmverifyItem struct {
	XMLName xml.Name `xml:"rpmverify_item"`

	Id oval.ItemIDPattern `xml:"id,attr"`

	Status StatusEnumeration `xml:"status,attr,omitempty"`

	Name *EntityItemStringType `xml:"name"`

	Filepath *EntityItemStringType `xml:"filepath"`

	SizeDiffers *EntityItemRpmVerifyResultType `xml:"size_differs"`

	ModeDiffers *EntityItemRpmVerifyResultType `xml:"mode_differs"`

	Md5Differs *EntityItemRpmVerifyResultType `xml:"md5_differs"`

	DeviceDiffers *EntityItemRpmVerifyResultType `xml:"device_differs"`

	LinkMismatch *EntityItemRpmVerifyResultType `xml:"link_mismatch"`

	OwnershipDiffers *EntityItemRpmVerifyResultType `xml:"ownership_differs"`

	GroupDiffers *EntityItemRpmVerifyResultType `xml:"group_differs"`

	MtimeDiffers *EntityItemRpmVerifyResultType `xml:"mtime_differs"`

	CapabilitiesDiffer *EntityItemRpmVerifyResultType `xml:"capabilities_differ"`

	ConfigurationFile *EntityItemBoolType `xml:"configuration_file"`

	DocumentationFile *EntityItemBoolType `xml:"documentation_file"`

	GhostFile *EntityItemBoolType `xml:"ghost_file"`

	LicenseFile *EntityItemBoolType `xml:"license_file"`

	ReadmeFile *EntityItemBoolType `xml:"readme_file"`

	Message []oval.MessageType `xml:"message"`
}

// Element
type RpmverifyfileItem struct {
	XMLName xml.Name `xml:"rpmverifyfile_item"`

	Id oval.ItemIDPattern `xml:"id,attr"`

	Status StatusEnumeration `xml:"status,attr,omitempty"`

	Name *EntityItemStringType `xml:"name"`

	Epoch *RpmverifyfileItemEpoch `xml:"epoch"`

	Version *RpmverifyfileItemVersion `xml:"version"`

	Release *RpmverifyfileItemRelease `xml:"release"`

	Arch *EntityItemStringType `xml:"arch"`

	Filepath *EntityItemStringType `xml:"filepath"`

	ExtendedName *EntityItemStringType `xml:"extended_name"`

	SizeDiffers *EntityItemRpmVerifyResultType `xml:"size_differs"`

	ModeDiffers *EntityItemRpmVerifyResultType `xml:"mode_differs"`

	Md5Differs *EntityItemRpmVerifyResultType `xml:"md5_differs"`

	FiledigestDiffers *EntityItemRpmVerifyResultType `xml:"filedigest_differs"`

	DeviceDiffers *EntityItemRpmVerifyResultType `xml:"device_differs"`

	LinkMismatch *EntityItemRpmVerifyResultType `xml:"link_mismatch"`

	OwnershipDiffers *EntityItemRpmVerifyResultType `xml:"ownership_differs"`

	GroupDiffers *EntityItemRpmVerifyResultType `xml:"group_differs"`

	MtimeDiffers *EntityItemRpmVerifyResultType `xml:"mtime_differs"`

	CapabilitiesDiffer *EntityItemRpmVerifyResultType `xml:"capabilities_differ"`

	ConfigurationFile *EntityItemBoolType `xml:"configuration_file"`

	DocumentationFile *EntityItemBoolType `xml:"documentation_file"`

	GhostFile *EntityItemBoolType `xml:"ghost_file"`

	LicenseFile *EntityItemBoolType `xml:"license_file"`

	ReadmeFile *EntityItemBoolType `xml:"readme_file"`

	Message []oval.MessageType `xml:"message"`
}

// Element
type RpmverifypackageItem struct {
	XMLName xml.Name `xml:"rpmverifypackage_item"`

	Id oval.ItemIDPattern `xml:"id,attr"`

	Status StatusEnumeration `xml:"status,attr,omitempty"`

	Name *EntityItemStringType `xml:"name"`

	Epoch *RpmverifypackageItemEpoch `xml:"epoch"`

	Version *RpmverifypackageItemVersion `xml:"version"`

	Release *RpmverifypackageItemRelease `xml:"release"`

	Arch *EntityItemStringType `xml:"arch"`

	ExtendedName *EntityItemStringType `xml:"extended_name"`

	DependencyCheckPassed *EntityItemBoolType `xml:"dependency_check_passed"`

	DigestCheckPassed *EntityItemBoolType `xml:"digest_check_passed"`

	VerificationScriptSuccessful *EntityItemBoolType `xml:"verification_script_successful"`

	SignatureCheckPassed *EntityItemBoolType `xml:"signature_check_passed"`

	Message []oval.MessageType `xml:"message"`
}

// Element
type SelinuxbooleanItem struct {
	XMLName xml.Name `xml:"selinuxboolean_item"`

	Id oval.ItemIDPattern `xml:"id,attr"`

	Status StatusEnumeration `xml:"status,attr,omitempty"`

	Name *EntityItemStringType `xml:"name"`

	CurrentStatus *EntityItemBoolType `xml:"current_status"`

	PendingStatus *EntityItemBoolType `xml:"pending_status"`

	Message []oval.MessageType `xml:"message"`
}

// Element
type SelinuxsecuritycontextItem struct {
	XMLName xml.Name `xml:"selinuxsecuritycontext_item"`

	Id oval.ItemIDPattern `xml:"id,attr"`

	Status StatusEnumeration `xml:"status,attr,omitempty"`

	Filepath *EntityItemStringType `xml:"filepath"`

	Path *EntityItemStringType `xml:"path"`

	Filename *EntityItemStringType `xml:"filename"`

	Pid *EntityItemIntType `xml:"pid"`

	User *EntityItemStringType `xml:"user"`

	Role *EntityItemStringType `xml:"role"`

	Type *EntityItemStringType `xml:"type"`

	LowSensitivity *EntityItemStringType `xml:"low_sensitivity"`

	LowCategory *EntityItemStringType `xml:"low_category"`

	HighSensitivity *EntityItemStringType `xml:"high_sensitivity"`

	HighCategory *EntityItemStringType `xml:"high_category"`

	RawlowSensitivity *EntityItemStringType `xml:"rawlow_sensitivity"`

	RawlowCategory *EntityItemStringType `xml:"rawlow_category"`

	RawhighSensitivity *EntityItemStringType `xml:"rawhigh_sensitivity"`

	RawhighCategory *EntityItemStringType `xml:"rawhigh_category"`

	Message []oval.MessageType `xml:"message"`
}

// Element
type SlackwarepkginfoItem struct {
	XMLName xml.Name `xml:"slackwarepkginfo_item"`

	Id oval.ItemIDPattern `xml:"id,attr"`

	Status StatusEnumeration `xml:"status,attr,omitempty"`

	Name *EntityItemStringType `xml:"name"`

	Version *SlackwarepkginfoItemVersion `xml:"version"`

	Architecture *EntityItemStringType `xml:"architecture"`

	Revision *EntityItemStringType `xml:"revision"`

	Message []oval.MessageType `xml:"message"`
}

// Element
type SystemdunitdependencyItem struct {
	XMLName xml.Name `xml:"systemdunitdependency_item"`

	Id oval.ItemIDPattern `xml:"id,attr"`

	Status StatusEnumeration `xml:"status,attr,omitempty"`

	Unit *EntityItemStringType `xml:"unit"`

	Dependency []EntityItemStringType `xml:"dependency"`

	Message []oval.MessageType `xml:"message"`
}

// Element
type SystemdunitpropertyItem struct {
	XMLName xml.Name `xml:"systemdunitproperty_item"`

	Id oval.ItemIDPattern `xml:"id,attr"`

	Status StatusEnumeration `xml:"status,attr,omitempty"`

	Unit *EntityItemStringType `xml:"unit"`

	Property *EntityItemStringType `xml:"property"`

	Value []EntityItemAnySimpleType `xml:"value"`

	Message []oval.MessageType `xml:"message"`
}

// Element
type DpkginfoItemEpoch struct {
	XMLName xml.Name `xml:"epoch"`

	Datatype oval.DatatypeEnumeration `xml:"datatype,attr,omitempty"`

	Mask bool `xml:"mask,attr,omitempty"`

	Status StatusEnumeration `xml:"status,attr,omitempty"`
}

// Element
type DpkginfoItemRelease struct {
	XMLName xml.Name `xml:"release"`

	Datatype oval.DatatypeEnumeration `xml:"datatype,attr,omitempty"`

	Mask bool `xml:"mask,attr,omitempty"`

	Status StatusEnumeration `xml:"status,attr,omitempty"`
}

// Element
type DpkginfoItemVersion struct {
	XMLName xml.Name `xml:"version"`

	Datatype oval.DatatypeEnumeration `xml:"datatype,attr,omitempty"`

	Mask bool `xml:"mask,attr,omitempty"`

	Status StatusEnumeration `xml:"status,attr,omitempty"`
}

// Element
type DpkginfoItemEvr struct {
	XMLName xml.Name `xml:"evr"`

	Datatype oval.DatatypeEnumeration `xml:"datatype,attr,omitempty"`

	Mask bool `xml:"mask,attr,omitempty"`

	Status StatusEnumeration `xml:"status,attr,omitempty"`
}

// Element
type RpminfoItemEpoch struct {
	XMLName xml.Name `xml:"epoch"`

	Datatype oval.DatatypeEnumeration `xml:"datatype,attr,omitempty"`

	Mask bool `xml:"mask,attr,omitempty"`

	Status StatusEnumeration `xml:"status,attr,omitempty"`
}

// Element
type RpminfoItemRelease struct {
	XMLName xml.Name `xml:"release"`

	Datatype oval.DatatypeEnumeration `xml:"datatype,attr,omitempty"`

	Mask bool `xml:"mask,attr,omitempty"`

	Status StatusEnumeration `xml:"status,attr,omitempty"`
}

// Element
type RpminfoItemVersion struct {
	XMLName xml.Name `xml:"version"`

	Datatype oval.DatatypeEnumeration `xml:"datatype,attr,omitempty"`

	Mask bool `xml:"mask,attr,omitempty"`

	Status StatusEnumeration `xml:"status,attr,omitempty"`
}

// Element
type RpmverifyfileItemEpoch struct {
	XMLName xml.Name `xml:"epoch"`

	Datatype oval.DatatypeEnumeration `xml:"datatype,attr,omitempty"`

	Mask bool `xml:"mask,attr,omitempty"`

	Status StatusEnumeration `xml:"status,attr,omitempty"`
}

// Element
type RpmverifyfileItemVersion struct {
	XMLName xml.Name `xml:"version"`

	Datatype oval.DatatypeEnumeration `xml:"datatype,attr,omitempty"`

	Mask bool `xml:"mask,attr,omitempty"`

	Status StatusEnumeration `xml:"status,attr,omitempty"`
}

// Element
type RpmverifyfileItemRelease struct {
	XMLName xml.Name `xml:"release"`

	Datatype oval.DatatypeEnumeration `xml:"datatype,attr,omitempty"`

	Mask bool `xml:"mask,attr,omitempty"`

	Status StatusEnumeration `xml:"status,attr,omitempty"`
}

// Element
type RpmverifypackageItemEpoch struct {
	XMLName xml.Name `xml:"epoch"`

	Datatype oval.DatatypeEnumeration `xml:"datatype,attr,omitempty"`

	Mask bool `xml:"mask,attr,omitempty"`

	Status StatusEnumeration `xml:"status,attr,omitempty"`
}

// Element
type RpmverifypackageItemVersion struct {
	XMLName xml.Name `xml:"version"`

	Datatype oval.DatatypeEnumeration `xml:"datatype,attr,omitempty"`

	Mask bool `xml:"mask,attr,omitempty"`

	Status StatusEnumeration `xml:"status,attr,omitempty"`
}

// Element
type RpmverifypackageItemRelease struct {
	XMLName xml.Name `xml:"release"`

	Datatype oval.DatatypeEnumeration `xml:"datatype,attr,omitempty"`

	Mask bool `xml:"mask,attr,omitempty"`

	Status StatusEnumeration `xml:"status,attr,omitempty"`
}

// Element
type SlackwarepkginfoItemVersion struct {
	XMLName xml.Name `xml:"version"`

	Datatype oval.DatatypeEnumeration `xml:"datatype,attr,omitempty"`

	Mask bool `xml:"mask,attr,omitempty"`

	Status StatusEnumeration `xml:"status,attr,omitempty"`
}

// XSD ComplexType declarations

type EntityItemRpmVerifyResultType struct {
	XMLName xml.Name

	Datatype oval.DatatypeEnumeration `xml:"datatype,attr,omitempty"`

	Mask bool `xml:"mask,attr,omitempty"`

	Status StatusEnumeration `xml:"status,attr,omitempty"`

	InnerXml string `xml:",innerxml"`
}

type EntityItemProtocolType struct {
	XMLName xml.Name

	Datatype oval.DatatypeEnumeration `xml:"datatype,attr,omitempty"`

	Mask bool `xml:"mask,attr,omitempty"`

	Status StatusEnumeration `xml:"status,attr,omitempty"`

	InnerXml string `xml:",innerxml"`
}

// XSD SimpleType declarations
